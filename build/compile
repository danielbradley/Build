#!/bin/bash
#
#	Compile v0.x
#
#	Set the location of your C Compiler here
#

OCL_VERSION=1.0.14
XDS_VERSION=0.x
XDS_REVISION=0
LIB_VERSION=0.9.0rc4
SUFFIX=9

CC=gcc
AR=ar

if [ "${OSTYPE:0:6}" == "darwin" ]
then
	PLATFORM=darwin
elif [ "${OSTYPE:0:7}" == "solaris" ]
then
	PLATFORM=solaris
else
	PLATFORM=linux-gnu
fi

POSIX=posix

LIBX_SHORT=dep/libislabs_build
LIBX_LONG=dep/libislabs_build-${LIB_VERSION}

OPENOCL_BASE_SHORT=dep/OpenOCL_PSA/libopenocl_base_psa
OPENOCL_BASE_LONG=dep/OpenOCL_PSA/libopenocl_base_psa-${OCL_VERSION}

OPENOCL_IO_SHORT=dep/OpenOCL_PSA/libopenocl_io_psa
OPENOCL_IO_LONG=dep/OpenOCL_PSA/libopenocl_io_psa-${OCL_VERSION}

OPENOCL_PROV_SHORT=dep/OpenOCL_PSA/libopenocl_provider_psa
OPENOCL_PROV_LONG=dep/OpenOCL_PSA/libopenocl_provider_psa-${OCL_VERSION}


#OPENXDS_CORE_BASE_SHORT=../../../OpenXDS_Core/${XDS_VERSION}/libopenxds_core_base
#OPENXDS_CORE_BASE_LONG=../../../OpenXDS_Core/${XDS_VERSION}/libopenxds_core_base-${XDS_VERSION}.${XDS_REVISION}

#OPENXDS_CORE_IO_SHORT=../../../OpenXDS_Core/${XDS_VERSION}/libopenxds_core_io
#OPENXDS_CORE_IO_LONG=../../../OpenXDS_Core/${XDS_VERSION}/libopenxds_core_io-${XDS_VERSION}.${XDS_REVISION}

#OPENXDS_CORE_PROV_SHORT=../../../OpenXDS_Core/${XDS_VERSION}/libopenxds_core_provider
#OPENXDS_CORE_PROV_LONG=../../../OpenXDS_Core/${XDS_VERSION}/libopenxds_core_provider-${XDS_VERSION}.${XDS_REVISION}


if [ -d ${LIBX_LONG} ]
then
	LIBX=${LIBX_LONG}
else
	LIBX=${LIBX_SHORT}
fi

if [ -d ${OPENOCL_BASE_LONG} ]
then
	BASE=${OPENOCL_BASE_LONG}
else
	BASE=${OPENOCL_BASE_SHORT}
fi

if [ -d ${OPENOCL_IO_LONG} ]
then
	IO=${OPENOCL_IO_LONG}
else
	IO=${OPENOCL_IO_SHORT}
fi

if [ -d ${OPENOCL_PROV_LONG} ]
then
	PROV=${OPENOCL_PROV_LONG}
else
	PROV=${OPENOCL_PROV_SHORT}
fi


#if [ -d ${OPENXDS_CORE_BASE_LONG} ]
#then
#	XDS_BASE=${OPENXDS_CORE_BASE_LONG}
#else
#	XDS_BASE=${OPENXDS_CORE_BASE_SHORT}
#fi

#if [ -d ${OPENXDS_CORE_IO_LONG} ]
#then
#	XDS_IO=${OPENXDS_CORE_IO_LONG}
#else
#	XDS_IO=${OPENXDS_CORE_IO_SHORT}
#fi

#if [ -d ${OPENXDS_CORE_PROV_LONG} ]
#then
#	XDS_PROV=${OPENXDS_CORE_PROV_LONG}
#else
#	XDS_PROV=${OPENXDS_CORE_PROV_SHORT}
#fi


# CPPFLAGS

OPENOCL_HEADERS="-I${BASE}/include -I${IO}/include -I${BASE}/source/include -I${IO}/source/include -I${PROV}/include"
OPENXDS_HEADERS="-I${XDS_BASE}/include -I${XDS_IO}/include -I${XDS_BASE}/source/include -I${XDS_IO}/source/include -I${XDS_PROV}/include"
CPPFLAGS="${CPPFLAGS} -I${LIBX}/include -I${LIBX}/source/include -Isource/include ${OPENOCL_HEADERS} ${OPENXDS_HEADERS} -DEXT_VERSION=\"${LIB_VERSION}\""

# CFLAGS

if   [ "darwin" == "$PLATFORM" ]
then
	CFLAGS="-c -g"
elif [ "solaris" == "$PLATFORM" ]
then
	CFLAGS="-c -g --PIC"
else
	CFLAGS="-c -g"
fi

# LFLAGS

LFLAGS=-ldl

FLAGS="${CPPFLAGS} ${CFLAGS}"
OPENOCL_LIBDIR="-L${BASE}/lib -L${IO}/lib -L${PROV}/lib"
OPENXDS_LIBDIR="-L${XDS_BASE}/lib -L${XDS_IO}/lib -L${XDS_PROV}/lib"
OPENOCL_LIB="-lopenocl_provider_psa -lopenocl_io_psa -lopenocl_base_psa"
OPENOCL_LIB="-lopenxds_core_provider -lopenxds_core_io -lopenxds_core_base"
POPENOCL_LIB="-Wl,-weak-lopenocl_provider_psa -Wl,-weak-lopenocl_io_psa -Wl,-weak-lopenocl_base_psa, -Wl,-weak-lopenxds_core_provider -Wl,-weak-lopenxds_core_io -Wl,-weak-lopenxds_core_base"
CARBON=""

#-framework carbon"

# LFLAGS and PFLAGS

if [ "darwin" == "$PLATFORM" ]
then
#	LDFLAGS="${OPENOCL_LIBDIR} ${OPENOCL_LIB} -dynamiclib ${CARBON}"
	LDFLAGS="-dynamiclib ${CARBON}"
	PFLAGS="${CPPFLAGS} -DOPENOCL_PROVIDER ${LIBX}/lib/libislabs_build.lib -dynamiclib $CARBON"
	LIB_SUFFIX="dylib"
else
#	LDFLAGS="${OPENOCL_LIBDIR} ${OPENOCL_LIB} -shared"
	LDFLAGS="-shared"
	PFLAGS="${CPPFLAGS} --PIC -DOPENOCL_PROVIDER ${LIBX}/lib/libislabs_build.lib -shared"
	LIB_SUFFIX="so"
fi

echo !
echo !
echo !		Compiling and linking with ${CC} and ${AR}
echo !

#
#	Create directories if not already there
#

mkdir -p bin
mkdir -p obj
mkdir -p ${LIBX}/obj
mkdir -p ${LIBX}/lib
mkdir -p providers/obj
mkdir -p providers/lib

#
#	Compile object files
#

	#	base

echo "Compile object files"

FILE=CharString
${CC} ${FLAGS} ${BASE}/source/src/${POSIX}/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Clock
${CC} ${FLAGS} ${BASE}/source/src/${POSIX}/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Environment
${CC} ${FLAGS} ${BASE}/source/src/${POSIX}/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Math
${CC} ${FLAGS} ${BASE}/source/src/${POSIX}/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Process
${CC} ${FLAGS} ${BASE}/source/src/${POSIX}/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=System
${CC} ${FLAGS} ${BASE}/source/src/${POSIX}/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Time
${CC} ${FLAGS} ${BASE}/source/src/${PLATFORM}/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Bag
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=CRuntime
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=CharStringBase
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=CharStringList
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=EnvironmentBase
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Hashtable
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Iterator
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Index
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=List
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=MathBase
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Map
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Node
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Sequence
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Set
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Sort
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Stack
${CC} ${FLAGS} ${BASE}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o


	#	io

FILE=Directory
${CC} ${FLAGS} ${IO}/source/src/${POSIX}/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=File
${CC} ${FLAGS} ${IO}/source/src/${POSIX}/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Path
${CC} ${FLAGS} ${IO}/source/src/${POSIX}/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o

FILE=Link
${CC} ${FLAGS} ${IO}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=DirectoryBase
${CC} ${FLAGS} ${IO}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=FileBase
${CC} ${FLAGS} ${IO}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=PathBase
${CC} ${FLAGS} ${IO}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o


	#	provider

FILE=Provider
${CC} ${FLAGS} ${PROV}/source/src/${POSIX}/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o


	#	libislabs_build

FILE=Arguments
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Buildable
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=BuildManager
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=BuildParameters
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Command
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=CommandPool
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=CurrentContext
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Global
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Package
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=ProviderContext
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=ProviderRegistry
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=Suite
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=TestPackage
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=TestSuite
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o
FILE=ToolSet
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj
echo ${FILE}.o

	#	build

${CC} ${FLAGS} source/src/main.c   -o obj/main.c.obj
echo main.o

#
#	Compile provider objects (target providers/obj)
#

echo "Compile provider object files"

${CC} ${FLAGS}  providers/islabs_darwin_apple-0.1/source/src/islabs_darwin_apple.c -o providers/obj/islabs_darwin_apple.c.obj
echo islabs_darwin_apple.c.obj

${CC} ${FLAGS}  providers/islabs_linux_gnu_lammpi-0.1/source/src/islabs_linux_gnu_lammpi.c -o providers/obj/islabs_linux_gnu_lammpi.c.obj
echo islabs_linux_gnu_lammpi.c.obj

${CC} ${FLAGS}  providers/islabs_linux_gnu_gnu-0.1/source/src/islabs_linux_gnu_gnu.c -o providers/obj/islabs_linux_gnu_gnu.c.obj
echo islabs_linux_gnu_gnu.c.obj

${CC} ${FLAGS}  providers/islabs_win32_gnu-0.1/source/src/islabs_win32_gnu.c -o providers/obj/islabs_win32_gnu.c.obj
echo islabs_win32_gnu.c.obj

${CC} ${FLAGS}  providers/islabs_win32_ms-0.1/source/src/islabs_win32_ms.c -o providers/obj/islabs_win32_ms.c.obj
echo islabs_win32_ms.c.obj

${CC} ${FLAGS}  providers/islabs_jdk_sun-0.1/source/src/islabs_jdk_sun.c -o providers/obj/islabs_jdk_sun.c.obj
echo islabs_jdk_sun.c.obj

${CC} ${FLAGS}  providers/islabs_dotnet_mono-0.1/source/src/islabs_dotnet_mono.c -o providers/obj/islabs_dotnet_mono.c.obj
echo islabs_jdk_sun.c.obj

${CC} ${FLAGS}  providers/islabs_dotnet_ms-0.1/source/src/islabs_dotnet_ms.c -o providers/obj/islabs_dotnet_ms.c.obj
echo islabs_jdk_sun.c.obj

#
#   Create libislabs_build.so
#


FILE=ProviderRegistry
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj

echo "Create libislabs_build shared library"

#${CC} -r ${LIBX}/obj/*.c.obj ${LDFLAGS} -o ${LIBX}/lib/libislabs_build.${LIB_SUFFIX}
${CC} ${LIBX}/obj/*.c.obj ${LDFLAGS} -o ${LIBX}/lib/libislabs_build.${LIB_SUFFIX}
#echo libislabs_build.${LIB_SUFFIX}

${AR} rcs ${LIBX}/lib/libislabs_build.lib ${LIBX}/obj/*.c.obj
echo libislabs_build.lib

#
#  Create providers
#

echo "Create providers (using ${CC})"

${CC} providers/islabs_darwin_apple-0.1/source/src/islabs_darwin_apple.c ${PFLAGS} -o providers/lib/islabs_darwin_apple.provider
echo islabs_darwin_apple.provider

${CC} providers/islabs_linux_gnu_lammpi-0.1/source/src/islabs_linux_gnu_lammpi.c ${PFLAGS} -o providers/lib/islabs_linux_gnu_lammpi.provider
echo islabs_linux_gnu_lammpi.provider

${CC} providers/islabs_linux_gnu_gnu-0.1/source/src/islabs_linux_gnu_gnu.c ${PFLAGS} -o providers/lib/islabs_linux_gnu_gnu.provider
echo islabs_linux_gnu_gnu.provider

${CC} providers/islabs_win32_gnu-0.1/source/src/islabs_win32_gnu.c ${PFLAGS} -o providers/lib/islabs_win32_gnu.provider
echo islabs_win32_gnu.provider

${CC} providers/islabs_win32_ms-0.1/source/src/islabs_win32_ms.c ${PFLAGS} -o providers/lib/islabs_win32_ms.provider
echo islabs_win32_ms.provider

${CC} providers/islabs_jdk_sun-0.1/source/src/islabs_jdk_sun.c ${PFLAGS} -o providers/lib/islabs_jdk_sun.provider
echo islabs_jdk_sun.provider

#
#	Create libislabs_build.lib
#

echo "Create libislabs_build static library"

FILE=Global
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj -DEMBED_PROVIDERS
FILE=ProviderRegistry
${CC} ${FLAGS} ${LIBX}/source/src/${FILE}.c     -o ${LIBX}/obj/${FILE}.c.obj -DEMBED_PROVIDERS

${AR} rcs ${LIBX}/lib/libislabs_build_all.lib providers/obj/*.c.obj ${LIBX}/obj/*.c.obj
echo ${LIBX}/lib/libislabs_build.lib

#
#	Create embedded build executable
#

echo "Create embedded build executable"

${CC} ${LFLAGS} obj/*.c.obj ${LIBX}/lib/libislabs_build_all.lib -o bin/build${SUFFIX}.embedded
echo bin/build${SUFFIX}.embedded

#
#	Create build executable with provider
#

echo "Create dynamic build executable"

${CC} ${LFLAGS} obj/*.c.obj ${LIBX}/lib/libislabs_build.lib -o bin/build${SUFFIX}
echo bin/build${SUFFIX}


